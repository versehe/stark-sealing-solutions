----- 1 ----SHOW A LIST OF EMPLOYEES IN THE DATABASE (MANAGERS CAN SEE WHO HAS ALREADY TRAVELED OR WHO STILL NEEDS A PROFILE) ------
SELECT EMPLOYEE_ID, NAME, MANAGER_ID, TEAM_ID FROM EMPLOYEE ORDER BY NAME;

---- 2 -----LIST ALL TRAVEL REQUESTS WITHOUT MANAGER APPROVAL, INCLUDE PROJECT, TOTAL REQUESTED AMOUNT AND EMPLOYEE INFORATION (A PROJECT MANAGER CAN SEE PENDING TRAVEL REQUESTS FOR THEIR PROJECT) -----
SELECT b.TRAVEL_DOCUMENT_ID, 
e.PROJECT_NAME, 
c.NAME, 
f.EST_TRAVEL_COST + f.EST_OTHER_COST + f.EST_HOTEL_COST AS "EST TOTAL AMOUNT"
FROM
TRAVEL_DOCUMENT b
JOIN TRAVEL_REQUEST f ON b.TRAVEL_DOCUMENT_ID = f.TRAVEL_DOCUMENT_ID
JOIN PROJECT e ON b.PROJECT_ID = e.PROJECT_ID
JOIN EMPLOYEE c ON b.EMPLOYEE_ID = c.EMPLOYEE_ID
JOIN TEAM  d ON c.TEAM_ID = d.TEAM_ID
WHERE b.MGR_STATUS < 3;


--- 3 -----IN ADDITION TO THE ONE ABOVE, THIS REPORT SHOWS THE AGE OF EACH REQUEST, WHICH CAN BE USED TO PRIORITIZE THE APPROVAL PROCESS FOR A MANAGER -----
SELECT b.TRAVEL_DOCUMENT_ID, 
e.PROJECT_NAME, 
c.NAME, 
f.EST_TRAVEL_COST + f.EST_OTHER_COST + f.EST_HOTEL_COST AS "EST TOTAL AMOUNT",
SYSDATE - b.CREATED_DATE AS "days/HH:MM:SS.MSEC"
FROM
TRAVEL_DOCUMENT b
JOIN TRAVEL_REQUEST f ON b.TRAVEL_DOCUMENT_ID = f.TRAVEL_DOCUMENT_ID
JOIN PROJECT e ON b.PROJECT_ID = e.PROJECT_ID
JOIN EMPLOYEE c ON b.EMPLOYEE_ID = c.EMPLOYEE_ID
JOIN TEAM  d ON c.TEAM_ID = d.TEAM_ID
WHERE b.MGR_STATUS < 3 
ORDER BY SYSDATE - b.CREATED_DATE DESC;


----- 4 ------COMPARE TRAVEL REQUEST AND EXPENSE DETAILS ON EACH TRAVEL DOCUMENT BY EXPENSE CATEGORIES(TRAVEL,HOTEL, OTHER) AND ALSO SHOW RECEIPT_FILE IF AVAILABLE
SELECT C.EMPLOYEE_ID, C.NAME AS EMPLOYEE_NAME , 
A.TRAVEL_DOCUMENT_ID, A.CLIENT_ID, A.PROJECT_ID, A.AGENT_ID, trunc(A.CREATED_DATE) AS "Created DATE", 
B.EST_TRAVEL_COST || '/' || NVL2(D.ACT_TRAVEL_COST, TO_CHAR(D.ACT_TRAVEL_COST),'N/A') AS "TRAVEL_COST(EST/ACT)", 
B.EST_HOTEL_COST || '/' || NVL2(D.ACT_HOTEL_COST, TO_CHAR(D.ACT_HOTEL_COST),'N/A') AS "HOTEL_COST(EST/ACT)", 
B.EST_TRAVEL_COST || '/' || NVL2(D.ACT_OTHER_COST, TO_CHAR(D.ACT_OTHER_COST),'N/A') AS "OTHER_COST(EST/ACT)", 
NVL(D.RECIEPT_FILE_URL, ' RECEIPT NOT AVAILABLE'), 
A.MGR_STATUS AS MANAGER_APPROVAL,
A.CFO_STATUS AS CFO_APPROVAL,
A.FIN_STATUS AS FINANCIAL_APPROVAL
FROM TRAVEL_DOCUMENT A JOIN TRAVEL_REQUEST B ON A.TRAVEL_DOCUMENT_ID = B.TRAVEL_DOCUMENT_ID
JOIN EXPENSE_DETAILS D ON A.TRAVEL_DOCUMENT_ID = D.TRAVEL_DOCUMENT_ID
JOIN EMPLOYEE C ON A.EMPLOYEE_ID = C.EMPLOYEE_ID;

--- 5 -----HOW MANY TRAVEL DOCUMENTS HAVE BEEN CREATED BY EACH EMPLOYEE, GROUPED BY EMPLOYEE NAME AND PROJECT (CHECK FOR FRAUDULENT ACTIVITY) ----
SELECT DISTINCT b.NAME, c.PROJECT_NAME, count(1) AS TOTAL_DOCUMENT_CREATED   FROM TRAVEL_DOCUMENT a
JOIN EMPLOYEE b
ON a.EMPLOYEE_ID = b.EMPLOYEE_ID
JOIN PROJECT c
ON a.PROJECT_ID = c. PROJECT_ID 
GROUP BY b.NAME, c.PROJECT_NAME;


--- 6 -----SEE HOW MANY REPORTS HAVE WHICH STATUS (STATISTICAL INFORMATION TO SEE IF PROCESS AND DATABASE ARE PERFORMING WELL) ----
SELECT CASE MGR_STATUS 
WHEN 1 THEN 'In Process'
WHEN 2 THEN 'Approved'
WHEN 3 THEN 'Rejected'
END AS "MANAGER_STATUS",
count(1)
FROM TRAVEL_DOCUMENT
GROUP BY MGR_STATUS;



--- 7 ----TEAM BUDGET AND TRAVEL SPENT BY TEAM, FOR INSTANCE IN YEAR 2015, 
--- SHOW PERCENTAGE OF TRAVEL BUDGET USED COMPARED TO THE ONE AVAILABLE (CHECK IF TEAM MAY GO OVER BUDGET) -----

SELECT AA.TEAM_ID, AA.TEAM_NAME, AA.TOTAL_SPENT, BB.YEAR, BB.AMOUNT,
(AA.TOTAL_SPENT/BB.AMOUNT) * 100 AS PCT_USED
FROM
(
  SELECT D.TEAM_ID, D.TEAM_NAME, SUM(A.TOTAL_SPENT) AS "TOTAL_SPENT"
  FROM
  (
    SELECT TRAVEL_DOCUMENT_ID,
    ACT_HOTEL_COST + ACT_OTHER_COST + ACT_TRAVEL_COST AS "TOTAL_SPENT" FROM EXPENSE_DETAILS
  ) A
  JOIN TRAVEL_DOCUMENT B ON
  A.TRAVEL_DOCUMENT_ID = B.TRAVEL_DOCUMENT_ID
  JOIN EMPLOYEE C ON
  B.EMPLOYEE_ID = C.EMPLOYEE_ID
  JOIN TEAM D ON
  C.TEAM_ID = D.TEAM_ID
  WHERE
  EXTRACT(year FROM B.CREATED_DATE) = &year
  GROUP BY D.TEAM_ID,D.TEAM_NAME
) AA
JOIN
TRAVEL_BUDGET BB
ON AA.TEAM_ID = BB.TEAMID AND BB.YEAR = &budget_year;


---- 8 -----TRAVEL EXPENSES EACH PROJECT HAS CAUSED SO FAR, HAVING MORE THAN 2000 EURO in TOTAL ORDERED BY AMOUNT DESCENDING ---
--- THIS WILL HELP EXECUTIVES UNDERSTAND INSIGHT ON EACH PROJECT USAGE ---
SELECT 
e.PROJECT_NAME, 
SUM(f.ACT_TRAVEL_COST + f.ACT_OTHER_COST + f.ACT_HOTEL_COST)||' €' AS "TRAVEL EXPENSES TO DATE" 
FROM
TRAVEL_DOCUMENT b
JOIN EXPENSE_DETAILS f ON b.TRAVEL_DOCUMENT_ID = f.TRAVEL_DOCUMENT_ID
JOIN PROJECT e ON b.PROJECT_ID = e.PROJECT_ID
JOIN EMPLOYEE c ON b.EMPLOYEE_ID = c.EMPLOYEE_ID
JOIN TEAM  d ON c.TEAM_ID = d.TEAM_ID
GROUP BY e.PROJECT_NAME
HAVING SUM((f.ACT_TRAVEL_COST + f.ACT_OTHER_COST + f.ACT_HOTEL_COST))>2000
ORDER BY SUM((f.ACT_TRAVEL_COST + f.ACT_OTHER_COST + f.ACT_HOTEL_COST)) DESC;

---- 9 -----AMOUNT THE COMPANY HAS SPENT TO DATE (STATISTICAL INFORMATION FOR CFO TO PLAN FOR NEXT PERIOD) ----
SELECT
SUM(f.ACT_TRAVEL_COST + f.ACT_OTHER_COST + f.ACT_HOTEL_COST)||' €' AS "TRAVEL EXPENSES TO DATE" 
FROM
TRAVEL_DOCUMENT b
JOIN EXPENSE_DETAILS f ON b.TRAVEL_DOCUMENT_ID = f.TRAVEL_DOCUMENT_ID
JOIN PROJECT e ON b.PROJECT_ID = e.PROJECT_ID
JOIN EMPLOYEE c ON b.EMPLOYEE_ID = c.EMPLOYEE_ID
JOIN TEAM  d ON c.TEAM_ID = d.TEAM_ID;

---- 10 LAURA MUGWORT HAS MARRIED, RENAME HER TO LAURA WURSTER ----
UPDATE employee SET name = 'Laura Wurster' WHERE employee_id = 20106;



---- 11 ----- HOW MUCH AVERAGE AMOUNT SPENT PER PROJECT FOREACH EMPLOYEE ----- 
---- GET THE TOTAL OF PROJECTS PER EMPLOYEE, THE TOTAL AND AVERAGE AMOUNT SPENT PER PROJECT (DISCOVER FRAUDULENT ACTIVITIES) -----
SELECT  AA.name,AA.team_name ,
AA.ACT_HOTEL_COST+AA.ACT_TRAVEL_COST+ AA.ACT_OTHER_COST as "the amount he spent",
AB."COUNT_PROJect" ,
(AA.ACT_HOTEL_COST+AA.ACT_TRAVEL_COST+ AA.ACT_OTHER_COST)/AB."COUNT_PROJect" as "amount/number of projects"
FROM
(select e.name , t.team_name , e.EMPLOYEE_ID,
d.ACT_HOTEL_COST,d.ACT_TRAVEL_COST, d.ACT_OTHER_COST 
from EMPLOYEE e join team t
on e.TEAM_ID = t.TEAM_ID
join TRAVEL_DOCUMENT r
on e.EMPLOYEE_ID = r.EMPLOYEE_ID
join EXPENSE_DETAILS d
on r.TRAVEL_DOCUMENT_ID = d.TRAVEL_DOCUMENT_ID) AA
join
(select count(p.project_id) AS "COUNT_PROJect" , e.name 
from project p join  TRAVEL_DOCUMENT r
on r.PROJECT_ID = p.PROJECT_ID
join EMPLOYEE e
on e.EMPLOYEE_ID = r.EMPLOYEE_ID
group by e.name)AB
ON AA.name = AB.name
;

---- 12 -----NUMBER OF TRAVEL REQUESTS PER TEAM (STATISTICAL INFORMATION FOR CFO SEE WHICH TEAMS TRAVEL MOST AND MAY NEED HIGHER TRAVEL BUDGETS) -----
SELECT d.team_name, count(1) AS "Number Of Travel Request"
from travel_request a join travel_document b
on a.travel_document_id= b.travel_document_id
join employee c
on b.employee_id= c.employee_id
join TEAM d
on c.team_id = d.TEAM_ID
group by d.team_name;


--- 13 ----ADDING, RENAMING AND DROPPING A CONSTRAINT THAT LIMITS TEAM BUDGETS ----
ALTER TABLE TRAVEL_BUDGET
ADD CONSTRAINT must_less_than_billion CHECK (AMOUNT < 100000000); 

ALTER TABLE TRAVEL_BUDGET 
RENAME CONSTRAINT must_less_than_billion TO must_less_than_billion_Yeah;

ALTER TABLE TRAVEL_BUDGET
DROP CONSTRAINT must_less_than_billion_Yeah;

-- 14 -----For each manager, give out a list of open travel requests and expense reports, compare travel requests and expense (to make approval process focus on exceeded budgets 
-- (give manager an overview which expense reports can be approved quickly, and which exceeded the allowed budget and have to be looked at more closely) --- ---
SELECT A.TRAVEL_DOCUMENT_ID, B.NAME, B.GENDER,
CASE A.MGR_STATUS 
WHEN 1 THEN 'In Process'
WHEN 2 THEN 'Approved'
WHEN 3 THEN 'Rejected'
END AS STATUS,
TR.EST_HOTEL_COST + TR.EST_OTHER_COST + TR.EST_TRAVEL_COST AS "ESTIMATED_COST",
NVL2(ED.TRAVEL_DOCUMENT_ID, TO_CHAR(ED.ACT_HOTEL_COST + ED.ACT_TRAVEL_COST + ED.ACT_OTHER_COST), 'N/A') AS "ACTUAL COST",
NVL2(ED.TRAVEL_DOCUMENT_ID, TO_CHAR((TR.EST_HOTEL_COST + TR.EST_OTHER_COST + TR.EST_TRAVEL_COST) - (ED.ACT_HOTEL_COST + ED.ACT_TRAVEL_COST + ED.ACT_OTHER_COST)), 'N/A') AS "DIFF(EST - ACT)",
A.CREATED_DATE  FROM 
TRAVEL_DOCUMENT A JOIN EMPLOYEE B
ON A.EMPLOYEE_ID = B.EMPLOYEE_ID
JOIN TRAVEL_REQUEST TR ON A.TRAVEL_DOCUMENT_ID = TR.TRAVEL_DOCUMENT_ID
LEFT JOIN EXPENSE_DETAILS ED ON A.TRAVEL_DOCUMENT_ID = ED.TRAVEL_DOCUMENT_ID
JOIN EMPLOYEE C
ON B.MANAGER_ID = C.EMPLOYEE_ID
WHERE MGR_STATUS = 1
AND C.EMPLOYEE_ID = &MANAGER_ID;





---15 -----COMPARE ALL EXPENSES TO ESTIMATED TRAVEL COSTS ON ALL TRAVEL DOCUMENTS NO MATTER WHO IS THE MANAGER
--- WHICH HAS ACTUAL COST > ESTIMATED COST (IF CFO WANTS TO SEE HOW OFTEN EMPLOYEES EXCEED BUDGET) ----
SELECT TRAVEL_DOCUMENT_ID, 
ESTIMATED_COST || ' €'  AS "Estimated Cost", 
ACTUAL_COST || ' €' AS "Actual Cost",
DIFF || ' €' AS "Different"
FROM(
SELECT A.TRAVEL_DOCUMENT_ID, A.EST_HOTEL_COST + A.EST_OTHER_COST + A.EST_TRAVEL_COST AS "ESTIMATED_COST",
B.ACT_HOTEL_COST + B.ACT_OTHER_COST + B.ACT_TRAVEL_COST AS "ACTUAL_COST",
(A.EST_HOTEL_COST + A.EST_OTHER_COST + A.EST_TRAVEL_COST) - (B.ACT_HOTEL_COST + B.ACT_OTHER_COST + B.ACT_TRAVEL_COST) AS "DIFF"
FROM TRAVEL_REQUEST A 
JOIN 
EXPENSE_DETAILS B
ON A.TRAVEL_DOCUMENT_ID = B.TRAVEL_DOCUMENT_ID
)
WHERE DIFF < 0;

---- 16 ----REPORTS THAT HAVE BEEN ISSUED WITHIN THE LAST 24 HOURS (COULD BE USED AS AN AUTOMATED DAILY REPORT TO GENERATE STATISTICAL VIEW FOR CFO ON HOW MANY 
---- REPORTS HAVE BEEN CREATED, ARE IN PROCESS OR APPROVED ----
CREATE OR REPLACE FORCE VIEW "GET_LESS_THAN_DAY_TD" ("TRAVEL_DOCUMENT_ID", "CLIENT_ID", "PROJECT_ID", "AGENT_ID", "EMPLOYEE_ID", "DIFF", "MANAGER_STATUS", "CFO_STATUS", "FINANCIAL_STATUS") 
AS 
  SELECT "TRAVEL_DOCUMENT_ID","CLIENT_ID","PROJECT_ID","AGENT_ID","EMPLOYEE_ID","DIFF","MANAGER_STATUS","CFO_STATUS","FINANCIAL_STATUS" 
  FROM
  (SELECT TRAVEL_DOCUMENT_ID,  CLIENT_ID, PROJECT_ID, AGENT_ID, EMPLOYEE_ID, 
  SYSTIMESTAMP - CREATED_DATE AS DIFF,
  CASE MGR_STATUS 
    WHEN 1 THEN 'In Process'
    WHEN 2 THEN 'Approved'
    WHEN 3 THEN 'Rejected'
  END AS "MANAGER_STATUS",
  CASE CFO_STATUS 
    WHEN 1 THEN 'In Process'
    WHEN 2 THEN 'Approved'
    WHEN 3 THEN 'Rejected'
  END AS "CFO_STATUS",
  CASE FIN_STATUS 
     WHEN 1 THEN 'In Process'
    WHEN 2 THEN 'Approved'
    WHEN 3 THEN 'Rejected'
  END AS "FINANCIAL_STATUS"
  FROM TRAVEL_DOCUMENT)
 WHERE EXTRACT(day from DIFF) < 1;

--- 17 ----INDEX TO IMPROVE PERFORMANCE ON EMPLOYEE_ID IN TRAVEL DOCUMENT TABLE ----
CREATE INDEX index_employee ON TRAVEL_DOCUMENT(employee_id);

--- 18 ----UNION: GET THE FIRST FIVE MEN AND THE FIRST FIVE WOMEN FROM EMPLOYEES ----
SELECT *
FROM
(
SELECT * FROM
(
SELECT *
FROM EMPLOYEE
WHERE GENDER = 'M'
ORDER BY NAME
)
WHERE ROWNUM <= 5
UNION ALL
SELECT * FROM
(
SELECT *
FROM EMPLOYEE
WHERE GENDER = 'F'
ORDER BY NAME
)
WHERE ROWNUM <= 5
);


--- 19 ----INTERSECT: GET THE TOTAL NUMBER OF TRAVEL DOCUMENTS FOR ALL PROJECTS WHERE THERE MORE THAN 15 and less than 30 ----
SELECT * 
FROM
(SELECT A.PROJECT_NAME , COUNT(1) AS TOTAL_DOCUMENT FROM 
PROJECT A JOIN TRAVEL_DOCUMENT B 
ON A.PROJECT_ID = B.PROJECT_ID
GROUP BY A.PROJECT_NAME
HAVING COUNT(1) > 15)
INTERSECT
(SELECT A.PROJECT_NAME , COUNT(1) AS TOTAL_DOCUMENT FROM 
PROJECT A JOIN TRAVEL_DOCUMENT B 
ON A.PROJECT_ID = B.PROJECT_ID
GROUP BY A.PROJECT_NAME
HAVING COUNT(1) < 30); 

